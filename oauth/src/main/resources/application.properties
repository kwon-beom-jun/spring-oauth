
# ------------------------------------------------------
# ✅ 일반 로그인 테스트 (Username/Password 방식)
# ------------------------------------------------------
# 1️ 브라우저에서 로그인 페이지 접속
#   🔗 URL: [http://localhost:8080/auth/login-page](http://localhost:8080/auth/login-page)  
#   - 또는 **POST 요청**으로 직접 로그인 (`/auth/login` 사용)
#
# 2️ 아이디/비밀번호 입력 후 로그인 시도  
#   - 예제 기본 계정 (초기 데이터, `DataInitializer.java` 참고)
#     - **ID**: `testuser`
#     - **비밀번호**: `1234`
#   - 만약 `testpass` 같은 다른 값으로 변경했다면, 입력 시 주의!
#
# 3️ 로그인 성공 후 JWT 발급 확인  
#   🔗 URL: [http://localhost:8080/auth/token](http://localhost:8080/auth/token)  
#   - 로그인 세션이 유지된 상태라면, JWT가 브라우저 화면에 표시됨  
#   - **콘솔 로그에도 "Generated JWT: ..." 형태로 JWT 출력됨**
#
# 📌 **추가 정보**:  
#   - JWT를 **API 호출 시 헤더에 포함**하여 보낼 수도 있음 (`Authorization: Bearer <JWT>`)  
#   - `SecurityConfig`에서 JWT 필터를 추가하면 자동 인증 가능  
#   - 로그아웃 시 `/auth/logout` 엔드포인트를 호출하면 세션이 만료됨


# ------------------------------------------------------
# ✅ Google OAuth2 로그인 테스트
# ------------------------------------------------------
# 1️ 브라우저에서 Google OAuth2 로그인 시작  
#   🔗 URL: [http://localhost:8080/oauth2/authorization/google](http://localhost:8080/oauth2/authorization/google)
#
# 2️ 구글 계정 선택 → 인증 완료 → 자동으로 로그인 세션 생성됨  
#   - OAuth2 인증이 완료되면 스프링 시큐리티가 자동으로 세션을 생성하여 유지
#
# 3️ 브라우저에서 JWT 발급 확인  
#   🔗 URL: [http://localhost:8080/auth/token](http://localhost:8080/auth/token)  
#   - 로그인 세션이 유지된 상태라면 JWT가 브라우저 화면에 표시됨  
#   - **콘솔 로그에도 "OAuth2 Token Generated: ..." 형태로 JWT 출력됨**
#
# 📌 **추가 정보**:  
#   - OAuth2 사용자 정보를 **DB의 UserDetails와 매핑하려면**, `SecurityConfig`에서 Principal 변환 로직 추가  
#   - 또는 **OAuth2UserService** 구현 후 사용자 정보를 DB에 저장하는 방식으로 확장 가능


# ------------------------------------------------------
# ✅ 로그아웃 테스트
# ------------------------------------------------------
# 1. http://localhost:8080/logout 요청
# 2. 세션 만료 후 /login 페이지 혹은 별도 페이지로 리다이렉트
# 3. 이후 다시 http://localhost:8080/auth/token 에 접근 시
#    - 인증 세션이 없으므로 리다이렉트 또는 401(Unauthorized)
# ------------------------------------------------------

spring.application.name=oauth
server.port=8080

# PostgreSQL 데이터베이스 설정
spring.datasource.url=jdbc:postgresql://localhost:5432/centgate
spring.datasource.username=centgate
spring.datasource.password=123
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA 설정
spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# -----------------------------------------------------------------
# Google OAuth2 설정
# -----------------------------------------------------------------
# 실제 구글 클라이언트 ID와 비밀번호(Secret)로 교체하세요
# Google Cloud 접속 > 콘솔 > 해당 프로젝트의 API 및 서비스 > 사용자 인증 정보 
#	> OAuth 2.0 클라이언트에서 해당 ID의 이름 클릭 > Additional information의 클라이언트 ID, 클라이언트 보안 비밀번호
spring.security.oauth2.client.registration.google.client-id=
spring.security.oauth2.client.registration.google.client-secret=

# 필요한 범위 설정
spring.security.oauth2.client.registration.google.scope=email, profile

# Google 표준 리디렉션 URI
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/google

# OAuth2 인증 요청을 보내는 엔드포인트
# 사용자가 로그인을 시도하면, 브라우저가 이 URL로 리다이렉트
# 구글의 OAuth 인증 페이지에서 사용자의 동의를 받으면, redirect_uri에 지정된 URL로 인가 코드(authorization code)를 반환
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
# 인가 코드를 액세스 토큰으로 교환하는 엔드포인트
# 인가 코드가 있으면 이 URL로 POST 요청을 보내서 액세스 토큰과 리프레시 토큰을 받음
# 요청 시 포함되는 파라미터:
# 	grant_type=authorization_code
# 	code=<인가 코드>
# 	redirect_uri=<애플리케이션의 리디렉트 URI>
# 	client_id=<클라이언트 ID>
# 	client_secret=<클라이언트 비밀 키>
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
#토큰을 이용해 사용자 정보를 가져오는 엔드포인트
#액세스 토큰을 포함하여 이 URL로 요청하면, 로그인한 사용자의 정보를 반환
#일반적으로 반환되는 사용자 정보:
#	sub: 사용자 고유 ID
#	name: 이름
#	email: 이메일 주소
#	picture: 프로필 사진
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub
# Sub 대신 Email을 사용할때
# spring.security.oauth2.client.provider.google.user-name-attribute=email

# -----------------------------------------------------------------
# Kakao OAuth2 설정
# -----------------------------------------------------------------

# ➡ 카카오 개발자 센터 > 내 애플리케이션 > [고급 설정] > [허용 IP 주소]
#	이 설정은 "REST API를 사용하는 서버의 IP 주소를 지정하여, 특정 IP만 API 호출을 허용할 것인가?" 를 결정하는 보안 기능
#	❗ 기본적으로 이 설정을 안 해도 정상 작동
#	다만, 설정하면 지정한 IP에서만 API 요청을 허용하는 제한이 생김
#	(예: 회사 서버에서만 API를 호출 가능하게 설정)
# ✅ 허용 IP 주소를 설정하면?
#	카카오 API(특히 토큰 요청, 사용자 정보 조회 등)에 대한 요청을 등록된 IP에서만 허용함
#	등록되지 않은 IP에서 요청하면 403 Forbidden 에러 발생
#	즉, 회사 서버 또는 특정 VPC에서만 API 요청 가능하게 제한 가능
# 🚫 허용 IP 주소를 설정하지 않으면?
#	어디서든 API 요청 가능 (기본값)
#	즉, 모든 클라이언트(서버, 로컬 개발 환경 포함)에서 카카오 API를 호출 가능

# 내 애플리케이션 > 앱 설정 > 앱 키
spring.security.oauth2.client.registration.kakao.client-id=
# 내 애플리케이션 > 제품 설정 > 카카오 로그인 > 보안
spring.security.oauth2.client.registration.kakao.client-secret=
# 카카오는 보통 'REST API 키' + '시크릿'을 함께 쓰기도 하지만, 실제 앱 설정에서 secret을 사용하지 않을 수도 있음.
# 사용하지 않는다면 client-secret 항목을 빼거나 비워두시면 됩니다.

# 카카오의 Redirect URI (카카오 개발자 센터에 등록한 것과 동일해야 함)
# 내 애플리케이션 > 제품 설정 > 카카오 로그인
spring.security.oauth2.client.registration.kakao.redirect-uri={baseUrl}/login/oauth2/code/kakao

# 동의받을 scope (프로필, 이메일 등)
# 내 애플리케이션 > 제품 설정 > 카카오 로그인 > 동의항목 : 해당 설정과 일치해야함
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,profile_image,account_email

# client_secret_basic
#	기본 인증(Basic Auth) 헤더를 사용
#	Authorization: Basic base64(client_id:client_secret) 형태로 전송
# client_secret_post
#	POST 바디(application/x-www-form-urlencoded)에 client_secret을 포함하여 전송
#	예시)
#		grant_type=authorization_code
#		code=xxx
#		client_id=xxx
#		client_secret=xxx
# none
#	클라이언트 시크릿 없이 진행 (예: Public Client, 모바일앱 등)
#
# ✅ 내용
#	카카오가 기대하는 방식은 client_secret_post
#	일반적으로 구글, 깃허브 같은 많은 OAuth2 제공자들은 client_secret_basic 방식을 쓰거나,
#	둘 다(client_secret_basic, client_secret_post)를 지원하는 경우가 많음
#	
#	그러나 카카오는 ‘client_secret’을 헤더가 아니라 POST 바디에 담기를 기대하는 경우가 대부분
#	
#	즉, 카카오 개발자 센터의 문서에도 “client_secret은 요청 바디로 전달” 예시가 나와있음
#	만약 카카오 쪽에서 “보안 → Client Secret 활성화”를 켜두었다면,
#	이 client_secret 값을 보내지 않거나, 잘못된 방식(헤더)을 쓰면 인증이 실패(401) 함.
#	따라서, 스프링 시큐리티가 기본으로 client_secret_basic(헤더 방식)으로 동작하면,
#	카카오는 이를 인정하지 않고 401을 반환할 수 있음
#	"나는 바디에 담긴 client_secret을 찾아야 하는데, 헤더로 왔네? → 거부"
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code

# Provider URL (카카오 OAuth2 Endpoints)
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me

# 카카오의 userNameAttribute (기본적으로 'id' 라는 필드를 식별자로 사용)
spring.security.oauth2.client.provider.kakao.user-name-attribute=id


# -----------------------------------------------------------------
# JWT 관련 설정
# -----------------------------------------------------------------
# 실제 운영 시에는 별도 보안 vault나 환경변수로 관리하는 것을 권장
jwt.secret=THIS_IS_SECRET_KEY_FOR_JWT_1234567890
# 1시간(밀리초 기준)
jwt.expiration=3600000


# -----------------------------------------------------------------
# 로그 설정
# -----------------------------------------------------------------
#logging.level.org.springframework.security=DEBUG
#logging.level.org.springframework.web=DEBUG
#logging.level.org.springframework.security.oauth2=DEBUG





